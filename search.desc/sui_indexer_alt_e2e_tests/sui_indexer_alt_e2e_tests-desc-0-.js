searchState.loadedDescShard("sui_indexer_alt_e2e_tests", 0, "A simulation of the network, accompanied by off-chain …\nA collection of the off-chain services (an indexer, a …\nExecute a system transaction advancing the lock by the …\nThe URL to send Consistent Store requests to.\nThe URL to send Consistent Store requests to.\nCreate a new checkpoint containing the transactions …\nThe URL to talk to the database on.\nThe URL to talk to the database on.\nExecute a signed transaction, returning its effects.\nReturns the reference for the first address-owned object …\nReturns the reference for the first address-owned object …\nReturns the reference for the first immutable object …\nReturns the reference for the first shared object created …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new account and credit it with <code>amount</code> gas units …\nThe URL to send GraphQL requests to.\nThe URL to send GraphQL requests to.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe URL to send JSON-RPC requests to.\nThe URL to send JSON-RPC requests to.\nReturns the latest checkpoint that we have all data for in …\nReturns the latest checkpoint that we have all data for in …\nReturns the latest checkpoint that the consistent store is …\nReturns the latest checkpoint that the GraphQL service is …\nReturns the latest checkpoint that the pruner is willing …\nReturns ClientArgs that use a temporary local ingestion …\nCreates a cluster with a fresh executor where the …\nConstruct a new off-chain cluster and spin up its …\nCreates a new cluster executing transactions using <code>executor</code>…\nReturn the reference gas price for the current epoch\nRequest gas from the faucet, sent to <code>address</code>. Return the …\nTriggers cancellation of all downstream services, waits …\nTriggers cancellation of all downstream services, waits …\nWaits until the Consistent Store has caught up to the …\nWaits until GraphQL has caught up to the given <code>checkpoint</code>, …\nWaits until GraphQL has caught up to the given <code>checkpoint</code>, …\nWaits until the indexer has caught up to the given …\nWaits until the indexer has caught up to the given …\nWaits until the indexer’s pruner has caught up to the …\nWaits until the indexer’s pruner has caught up to the …\nWrites a checkpoint file to the given path.")